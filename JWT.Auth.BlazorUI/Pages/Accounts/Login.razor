@page "/login"
@using System.Text.Json
@using System.Text
@using System.Net
@using JWT.Auth.BlazorUI.Shared.Providers
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject AuthenticationStateProvider _authenticationStateProvider

<div class="ma-6 d-flex justify-center">
    <MudChip>
        <h3>Login</h3>
    </MudChip>
</div>

<div class="ma-6 d-flex justify-center">
    <MudCard Width="500px">
        <MudForm 
            Model="loginVM"
            Validation="loginValidator.ValidateValue"
            @ref="form"
        >
            <MudCardContent>
                @if (!string.IsNullOrEmpty(ApiErrorMessage))
                {
                    <MudChip Class="d-flex justify-center" Color="Color.Error">
                        <p>@ApiErrorMessage</p>
                    </MudChip>
                }

                <MudTextField @bind-Value="loginVM.Email"
                              For="@(() => loginVM.Email)"
                              Immediate="true"
                              Label="Email" />
                <MudTextField @bind-Value="loginVM.Password"
                              For="@(() => loginVM.Password)"
                              Immediate="true"
                              InputType="InputType.Password"
                              Label="Password" />
            </MudCardContent>

            <MudCardActions>
                <MudButton 
                    Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    Class="ml-auto" 
                    OnClick="LoginAsync"
                >Login</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</div>

@code {
    LoginVM loginVM = new LoginVM();
    LoginValidationVM loginValidator = new LoginValidationVM();
    MudForm form;
    string ApiErrorMessage;

    private async Task LoginAsync()
    {
        await form.Validate();

        if(form.IsValid)
        {
            var jsonPlayLoad = JsonSerializer.Serialize(loginVM);
            var requestContent = new StringContent(jsonPlayLoad, Encoding.UTF8, "application/json");

            var response = await _http.PostAsync("api/User/login", requestContent);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors?.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            ApiErrorMessage = $"{ApiErrorMessage} | {errorMessage}";
                        }
                    }
                }
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponseVM>();
                await _localStorageService.SetItemAsync<string>("jwt-access-token", tokenResponse.AccessToken);
                (_authenticationStateProvider as CustomAuthProvider).NotifyAuthState();
            }
            else
            {
                ApiErrorMessage = "Login Failed Please try after some time.";
            }
        }
    }
}
